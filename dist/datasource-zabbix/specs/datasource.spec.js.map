{"version":3,"sources":["../../../src/datasource-zabbix/specs/datasource.spec.js"],"names":["_","Q","Promise","Datasource","zabbixTemplateFormat","describe","ctx","beforeEach","instanceSettings","jsonData","alerting","username","password","trends","trendsFrom","trendsRange","dbConnection","enabled","templateSrv","alertSrv","dashboardSrv","zabbixAlertingSrv","setPanelAlertState","jest","fn","removeZabbixThreshold","zabbix","ds","replaceTemplateVars","str","alertQuery","when","options","targets","group","filter","host","application","item","range","from","to","it","done","query","then","expect","result","data","length","toBe","ranges","forEach","queryNumericData","callArgs","mock","calls","mockClear","getHistory","mockReturnValue","resolve","clock","itemid","ns","value","getItemsFromTarget","hosts","hostid","name","key_","textFilter","useCaptureGroups","mode","resultFormat","skipEmptyValues","tableData","columns","toEqual","text","rows","testReplacingVariable","target","varValue","expectedResult","replace","template_var_value","expected_result","getGroups","getHosts","getApps","getItems","tests","test","metricFindQuery","toBeCalledWith","targetItems","itemTriggers","getAlerts","resp","thresholds","toHaveLength"],"mappings":"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","file":"datasource.spec.js","sourcesContent":["import _ from 'lodash';\nimport Q, { Promise } from \"q\";\nimport {Datasource} from \"../module\";\nimport {zabbixTemplateFormat} from \"../datasource\";\n\ndescribe('ZabbixDatasource', () => {\n  let ctx = {};\n\n  beforeEach(() => {\n    ctx.instanceSettings = {\n      jsonData: {\n        alerting: true,\n        username: 'zabbix',\n        password: 'zabbix',\n        trends: true,\n        trendsFrom: '14d',\n        trendsRange: '7d',\n        dbConnection: {\n          enabled: false\n        }\n      }\n    };\n    ctx.templateSrv = {};\n    ctx.alertSrv = {};\n    ctx.dashboardSrv = {};\n    ctx.zabbixAlertingSrv = {\n      setPanelAlertState: jest.fn(),\n      removeZabbixThreshold: jest.fn(),\n    };\n    ctx.zabbix = () => {};\n\n    ctx.ds = new Datasource(ctx.instanceSettings, ctx.templateSrv, ctx.alertSrv, ctx.dashboardSrv, ctx.zabbixAlertingSrv, ctx.zabbix);\n  });\n\n  describe('When querying data', () => {\n    beforeEach(() => {\n      ctx.ds.replaceTemplateVars = (str) => str;\n      ctx.ds.alertQuery = () => Q.when([]);\n    });\n\n    ctx.options = {\n      targets: [\n        {\n          group: {filter: \"\"},\n          host: {filter: \"\"},\n          application: {filter: \"\"},\n          item: {filter: \"\"}\n        }\n      ],\n      range: {from: 'now-7d', to: 'now'}\n    };\n\n    it('should return an empty array when no targets are set', (done) => {\n      let options = {\n        targets: [],\n        range: {from: 'now-6h', to: 'now'}\n      };\n      ctx.ds.query(options).then(result => {\n        expect(result.data.length).toBe(0);\n        done();\n      });\n    });\n\n    it('should use trends if it enabled and time more than trendsFrom', (done) => {\n      let ranges = ['now-7d', 'now-168h', 'now-1M', 'now-1y'];\n\n      _.forEach(ranges, range => {\n        ctx.options.range.from = range;\n        ctx.ds.queryNumericData = jest.fn();\n        ctx.ds.query(ctx.options);\n\n        // Check that useTrends options is true\n        let callArgs = ctx.ds.queryNumericData.mock.calls[0];\n        expect(callArgs[2]).toBe(true);\n        ctx.ds.queryNumericData.mockClear();\n      });\n\n      done();\n    });\n\n    it('shouldnt use trends if it enabled and time less than trendsFrom', (done) => {\n      let ranges = ['now-6d', 'now-167h', 'now-1h', 'now-30m', 'now-30s'];\n\n      _.forEach(ranges, range => {\n        ctx.options.range.from = range;\n        ctx.ds.queryNumericData = jest.fn();\n        ctx.ds.query(ctx.options);\n\n        // Check that useTrends options is false\n        let callArgs = ctx.ds.queryNumericData.mock.calls[0];\n        expect(callArgs[2]).toBe(false);\n        ctx.ds.queryNumericData.mockClear();\n      });\n      done();\n    });\n\n  });\n\n  describe('When querying text data', () => {\n    beforeEach(() => {\n      ctx.ds.replaceTemplateVars = (str) => str;\n      ctx.ds.alertQuery = () => Q.when([]);\n      ctx.ds.zabbix.getHistory = jest.fn().mockReturnValue(Promise.resolve([\n        {clock: \"1500010200\", itemid:\"10100\", ns:\"900111000\", value:\"Linux first\"},\n        {clock: \"1500010300\", itemid:\"10100\", ns:\"900111000\", value:\"Linux 2nd\"},\n        {clock: \"1500010400\", itemid:\"10100\", ns:\"900111000\", value:\"Linux last\"}\n      ]));\n\n      ctx.ds.zabbix.getItemsFromTarget = jest.fn().mockReturnValue(Promise.resolve([\n        {\n          hosts: [{hostid: \"10001\", name: \"Zabbix server\"}],\n          itemid: \"10100\",\n          name: \"System information\",\n          key_: \"system.uname\",\n        }\n      ]));\n\n      ctx.options = {\n        range: {from: 'now-1h', to: 'now'},\n        targets: [\n          {\n            group: {filter: \"\"},\n            host: {filter: \"Zabbix server\"},\n            application: {filter: \"\"},\n            item: {filter: \"System information\"},\n            textFilter: \"\",\n            useCaptureGroups: true,\n            mode: 2,\n            resultFormat: \"table\",\n            options: {\n              skipEmptyValues: false\n            }\n          }\n        ],\n      };\n    });\n\n    it('should return data in table format', (done) => {\n      ctx.ds.query(ctx.options).then(result => {\n        expect(result.data.length).toBe(1);\n\n        let tableData = result.data[0];\n        expect(tableData.columns).toEqual([\n          {text: 'Host'}, {text: 'Item'}, {text: 'Key'}, {text: 'Last value'}\n        ]);\n        expect(tableData.rows).toEqual([\n          ['Zabbix server', 'System information', 'system.uname', 'Linux last']\n        ]);\n        done();\n      });\n    });\n\n    it('should extract value if regex with capture group is used', (done) => {\n      ctx.options.targets[0].textFilter = \"Linux (.*)\";\n      ctx.ds.query(ctx.options).then(result => {\n        let tableData = result.data[0];\n        expect(tableData.rows[0][3]).toEqual('last');\n        done();\n      });\n    });\n\n    it('should skip item when last value is empty', () => {\n      ctx.ds.zabbix.getItemsFromTarget = jest.fn().mockReturnValue(Promise.resolve([\n        {\n          hosts: [{hostid: \"10001\", name: \"Zabbix server\"}],\n          itemid: \"10100\", name: \"System information\", key_: \"system.uname\"\n        },\n        {\n          hosts: [{hostid: \"10002\", name: \"Server02\"}],\n          itemid: \"90109\", name: \"System information\", key_: \"system.uname\"\n        }\n      ]));\n\n      ctx.options.targets[0].options.skipEmptyValues = true;\n      ctx.ds.zabbix.getHistory = jest.fn().mockReturnValue(Promise.resolve([\n          {clock: \"1500010200\", itemid:\"10100\", ns:\"900111000\", value:\"Linux first\"},\n          {clock: \"1500010300\", itemid:\"10100\", ns:\"900111000\", value:\"Linux 2nd\"},\n          {clock: \"1500010400\", itemid:\"10100\", ns:\"900111000\", value:\"Linux last\"},\n          {clock: \"1500010200\", itemid:\"90109\", ns:\"900111000\", value:\"Non empty value\"},\n          {clock: \"1500010500\", itemid:\"90109\", ns:\"900111000\", value:\"\"}\n      ]));\n      return ctx.ds.query(ctx.options).then(result => {\n        let tableData = result.data[0];\n        expect(tableData.rows.length).toBe(1);\n        expect(tableData.rows[0][3]).toEqual('Linux last');\n      });\n    });\n  });\n\n  describe('When replacing template variables', () => {\n\n    function testReplacingVariable(target, varValue, expectedResult, done) {\n      ctx.ds.templateSrv.replace = () => {\n        return zabbixTemplateFormat(varValue);\n      };\n\n      let result = ctx.ds.replaceTemplateVars(target);\n      expect(result).toBe(expectedResult);\n      done();\n    }\n\n    /*\n     * Alphanumerics, spaces, dots, dashes and underscores\n     * are allowed in Zabbix host name.\n     * 'AaBbCc0123 .-_'\n     */\n    it('should return properly escaped regex', (done) => {\n      let target = '$host';\n      let template_var_value = 'AaBbCc0123 .-_';\n      let expected_result = '/^AaBbCc0123 \\\\.-_$/';\n\n      testReplacingVariable(target, template_var_value, expected_result, done);\n    });\n\n    /*\n     * Single-value variable\n     * $host = backend01\n     * $host => /^backend01|backend01$/\n     */\n    it('should return proper regex for single value', (done) => {\n      let target = '$host';\n      let template_var_value = 'backend01';\n      let expected_result = '/^backend01$/';\n\n      testReplacingVariable(target, template_var_value, expected_result, done);\n    });\n\n    /*\n     * Multi-value variable\n     * $host = [backend01, backend02]\n     * $host => /^(backend01|backend01)$/\n     */\n    it('should return proper regex for multi-value', (done) => {\n      let target = '$host';\n      let template_var_value = ['backend01', 'backend02'];\n      let expected_result = '/^(backend01|backend02)$/';\n\n      testReplacingVariable(target, template_var_value, expected_result, done);\n    });\n  });\n\n  describe('When invoking metricFindQuery()', () => {\n    beforeEach(() => {\n      ctx.ds.replaceTemplateVars = (str) => str;\n      ctx.ds.zabbix = {\n        getGroups: jest.fn().mockReturnValue(Q.when([])),\n        getHosts: jest.fn().mockReturnValue(Q.when([])),\n        getApps: jest.fn().mockReturnValue(Q.when([])),\n        getItems: jest.fn().mockReturnValue(Q.when([]))\n      };\n    });\n\n    it('should return groups', (done) => {\n      const tests = [\n        {query: '*',        expect: '/.*/'},\n        {query: '',         expect: ''},\n        {query: 'Backend',  expect: 'Backend'},\n        {query: 'Back*',    expect: 'Back*'},\n      ];\n\n      for (const test of tests) {\n        ctx.ds.metricFindQuery(test.query);\n        expect(ctx.ds.zabbix.getGroups).toBeCalledWith(test.expect);\n        ctx.ds.zabbix.getGroups.mockClear();\n      }\n      done();\n    });\n\n    it('should return hosts', (done) => {\n      const tests = [\n        {query: '*.*',       expect: ['/.*/', '/.*/']},\n        {query: '.',         expect: ['', '']},\n        {query: 'Backend.*', expect: ['Backend', '/.*/']},\n        {query: 'Back*.',    expect: ['Back*', '']},\n      ];\n\n      for (const test of tests) {\n        ctx.ds.metricFindQuery(test.query);\n        expect(ctx.ds.zabbix.getHosts).toBeCalledWith(test.expect[0], test.expect[1]);\n        ctx.ds.zabbix.getHosts.mockClear();\n      }\n      done();\n    });\n\n    it('should return applications', (done) => {\n      const tests = [\n        {query: '*.*.*',               expect: ['/.*/', '/.*/', '/.*/']},\n        {query: '.*.',                 expect: ['', '/.*/', '']},\n        {query: 'Backend.backend01.*', expect: ['Backend', 'backend01', '/.*/']},\n        {query: 'Back*.*.',            expect: ['Back*', '/.*/', '']}\n      ];\n\n      for (const test of tests) {\n        ctx.ds.metricFindQuery(test.query);\n        expect(ctx.ds.zabbix.getApps).toBeCalledWith(test.expect[0], test.expect[1], test.expect[2]);\n        ctx.ds.zabbix.getApps.mockClear();\n      }\n      done();\n    });\n\n    it('should return items', (done) => {\n      const tests = [\n        {query: '*.*.*.*',               expect: ['/.*/', '/.*/', '', '/.*/']},\n        {query: '.*.*.*',                expect: ['', '/.*/', '', '/.*/']},\n        {query: 'Backend.backend01.*.*', expect: ['Backend', 'backend01', '', '/.*/']},\n        {query: 'Back*.*.cpu.*',         expect: ['Back*', '/.*/', 'cpu', '/.*/']}\n      ];\n\n      for (const test of tests) {\n        ctx.ds.metricFindQuery(test.query);\n        expect(ctx.ds.zabbix.getItems)\n          .toBeCalledWith(test.expect[0], test.expect[1], test.expect[2], test.expect[3]);\n        ctx.ds.zabbix.getItems.mockClear();\n      }\n      done();\n    });\n\n    it('should invoke method with proper arguments', (done) => {\n      let query = '*.*';\n\n      ctx.ds.metricFindQuery(query);\n      expect(ctx.ds.zabbix.getHosts).toBeCalledWith('/.*/', '/.*/');\n      done();\n    });\n  });\n\n  describe('When querying alerts', () => {\n    let options = {};\n\n    beforeEach(() => {\n      ctx.ds.replaceTemplateVars = (str) => str;\n\n      let targetItems = [{\n        \"itemid\": \"1\",\n        \"name\": \"test item\",\n        \"key_\": \"test.key\",\n        \"value_type\": \"3\",\n        \"hostid\": \"10631\",\n        \"status\": \"0\",\n        \"state\": \"0\",\n        \"hosts\": [{\"hostid\": \"10631\", \"name\": \"Test host\"}],\n        \"item\": \"Test item\"\n      }];\n      ctx.ds.zabbix.getItemsFromTarget = () => Promise.resolve(targetItems);\n\n      options = {\n        \"panelId\": 10,\n        \"targets\": [{\n          \"application\": {\"filter\": \"\"},\n          \"group\": {\"filter\": \"Test group\"},\n          \"host\": {\"filter\": \"Test host\"},\n          \"item\": {\"filter\": \"Test item\"},\n        }]\n      };\n    });\n\n    it('should return threshold when comparative symbol is `less than`', () => {\n\n      let itemTriggers = [{\n        \"triggerid\": \"15383\",\n        \"priority\": \"4\",\n        \"expression\": \"{15915}<100\",\n      }];\n\n      ctx.ds.zabbix.getAlerts = () => Promise.resolve(itemTriggers);\n\n      return ctx.ds.alertQuery(options)\n        .then(resp => {\n          expect(resp.thresholds).toHaveLength(1);\n          expect(resp.thresholds[0]).toBe(100);\n          return resp;\n        });\n    });\n\n    it('should return threshold when comparative symbol is `less than or equal`', () => {\n\n      let itemTriggers = [{\n        \"triggerid\": \"15383\",\n        \"priority\": \"4\",\n        \"expression\": \"{15915}<=100\",\n      }];\n\n      ctx.ds.zabbix.getAlerts = () => Promise.resolve(itemTriggers);\n\n      return ctx.ds.alertQuery(options)\n        .then(resp => {\n          expect(resp.thresholds.length).toBe(1);\n          expect(resp.thresholds[0]).toBe(100);\n          return resp;\n        });\n    });\n\n    it('should return threshold when comparative symbol is `greater than or equal`', () => {\n\n      let itemTriggers = [{\n        \"triggerid\": \"15383\",\n        \"priority\": \"4\",\n        \"expression\": \"{15915}>=30\",\n      }];\n\n      ctx.ds.zabbix.getAlerts = () => Promise.resolve(itemTriggers);\n\n      return ctx.ds.alertQuery(options)\n        .then(resp => {\n          expect(resp.thresholds.length).toBe(1);\n          expect(resp.thresholds[0]).toBe(30);\n          return resp;\n        });\n    });\n\n    it('should return threshold when comparative symbol is `equal`', () => {\n\n      let itemTriggers = [{\n        \"triggerid\": \"15383\",\n        \"priority\": \"4\",\n        \"expression\": \"{15915}=50\",\n      }];\n\n      ctx.ds.zabbix.getAlerts = () => Promise.resolve(itemTriggers);\n\n      return ctx.ds.alertQuery(options)\n        .then(resp => {\n          expect(resp.thresholds.length).toBe(1);\n          expect(resp.thresholds[0]).toBe(50);\n          return resp;\n        });\n    });\n  });\n});\n"]}