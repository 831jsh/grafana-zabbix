{"version":3,"sources":["../../../src/datasource-zabbix/specs/migrations.test.js"],"names":["migrateDSConfig","DS_CONFIG_SCHEMA","describe","ctx","beforeEach","jsonData","dbConnection","enable","datasourceId","it","expect","toMatchObject","dbConnectionEnable","dbConnectionDatasourceId","schema","futureOptionOne","futureOptionTwo","toBeUndefined"],"mappings":";;;;;;;;AAASA,qB,eAAAA,e;AAAiBC,sB,eAAAA,gB;;;;AAE1BC,eAAS,YAAT,EAAuB,YAAM;AAC3B,YAAIC,MAAM,EAAV;;AAEAD,iBAAS,kCAAT,EAA6C,YAAM;AACjDE,qBAAW,YAAM;AACfD,gBAAIE,QAAJ,GAAe;AACbC,4BAAc;AACZC,wBAAQ,IADI;AAEZC,8BAAc;AAFF;AADD,aAAf;AAMD,WAPD;;AASAC,aAAG,0DAAH,EAA+D,YAAM;AACnET,4BAAgBG,IAAIE,QAApB;AACAK,mBAAOP,IAAIE,QAAX,EAAqBM,aAArB,CAAmC;AACjCC,kCAAoB,IADa;AAEjCC,wCAA0B,CAFO;AAGjCC,sBAAQb;AAHyB,aAAnC;AAKD,WAPD;;AASAQ,aAAG,mDAAH,EAAwD,YAAM;AAC5DN,gBAAIE,QAAJ,GAAe;AACbU,+BAAiB,KADJ;AAEbC,+BAAiB,KAFJ;AAGbF,sBAAQb;AAHK,aAAf;AAKAD,4BAAgBG,IAAIE,QAApB;AACAK,mBAAOP,IAAIE,QAAX,EAAqBM,aAArB,CAAmC;AACjCI,+BAAiB,KADgB;AAEjCC,+BAAiB,KAFgB;AAGjCF,sBAAQb;AAHyB,aAAnC;AAKAS,mBAAOP,IAAIE,QAAJ,CAAaO,kBAApB,EAAwCK,aAAxC;AACAP,mBAAOP,IAAIE,QAAJ,CAAaQ,wBAApB,EAA8CI,aAA9C;AACD,WAdD;AAeD,SAlCD;AAmCD,OAtCD","file":"migrations.test.js","sourcesContent":["import { migrateDSConfig, DS_CONFIG_SCHEMA } from '../migrations';\n\ndescribe('Migrations', () => {\n  let ctx = {};\n\n  describe('When migrating datasource config', () => {\n    beforeEach(() => {\n      ctx.jsonData = {\n        dbConnection: {\n          enable: true,\n          datasourceId: 1\n        }\n      };\n    });\n\n    it('should change direct DB connection setting to flat style', () => {\n      migrateDSConfig(ctx.jsonData);\n      expect(ctx.jsonData).toMatchObject({\n        dbConnectionEnable: true,\n        dbConnectionDatasourceId: 1,\n        schema: DS_CONFIG_SCHEMA\n      });\n    });\n\n    it('should not touch anything if schema is up to date', () => {\n      ctx.jsonData = {\n        futureOptionOne: 'foo',\n        futureOptionTwo: 'bar',\n        schema: DS_CONFIG_SCHEMA\n      };\n      migrateDSConfig(ctx.jsonData);\n      expect(ctx.jsonData).toMatchObject({\n        futureOptionOne: 'foo',\n        futureOptionTwo: 'bar',\n        schema: DS_CONFIG_SCHEMA\n      });\n      expect(ctx.jsonData.dbConnectionEnable).toBeUndefined();\n      expect(ctx.jsonData.dbConnectionDatasourceId).toBeUndefined();\n    });\n  });\n});\n"]}