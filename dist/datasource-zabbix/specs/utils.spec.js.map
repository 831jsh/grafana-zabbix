{"version":3,"sources":["../../../src/datasource-zabbix/specs/utils.spec.js"],"names":["_","utils","describe","it","done","test_cases","name","key","expected","each","expandedName","expandItemName","test_case","expect","toBe","query","splitQuery","splitTemplateQuery","toEqual"],"mappings":"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","file":"utils.spec.js","sourcesContent":["import _ from 'lodash';\nimport * as utils from '../utils';\n\ndescribe('Utils', () => {\n\n  describe('expandItemName()', () => {\n\n    it('should properly expand unquoted params', (done) => {\n      let test_cases = [\n        {\n          name: `CPU $2 time`,\n          key: `system.cpu.util[,user,avg1]`,\n          expected: \"CPU user time\"\n        },\n        {\n          name: `CPU $2 time - $3`,\n          key: `system.cpu.util[,system,avg1]`,\n          expected: \"CPU system time - avg1\"\n        },\n        {\n          name: `CPU - $1 - $2 - $3`,\n          key: `system.cpu.util[,system,avg1]`,\n          expected: \"CPU -  - system - avg1\"\n        }\n      ];\n\n      _.each(test_cases, test_case => {\n        let expandedName = utils.expandItemName(test_case.name, test_case.key);\n        expect(expandedName).toBe(test_case.expected);\n      });\n      done();\n    });\n\n    it('should properly expand quoted params with commas', (done) => {\n      let test_cases = [\n        {\n          name: `CPU $2 time`,\n          key: `system.cpu.util[\"type=user,value=avg\",user]`,\n          expected: \"CPU user time\"\n        },\n        {\n          name: `CPU $1 time`,\n          key: `system.cpu.util[\"type=user,value=avg\",\"user\"]`,\n          expected: \"CPU type=user,value=avg time\"\n        },\n        {\n          name: `CPU $1 time $3`,\n          key: `system.cpu.util[\"type=user,value=avg\",,\"user\"]`,\n          expected: \"CPU type=user,value=avg time user\"\n        },\n        {\n          name: `CPU $1 $2 $3`,\n          key: `system.cpu.util[\"type=user,value=avg\",time,\"user\"]`,\n          expected: \"CPU type=user,value=avg time user\"\n        }\n      ];\n\n      _.each(test_cases, test_case => {\n        let expandedName = utils.expandItemName(test_case.name, test_case.key);\n        expect(expandedName).toBe(test_case.expected);\n      });\n      done();\n    });\n\n    it('should properly expand array params', (done) => {\n      let test_cases = [\n        {\n          name: `CPU $2 - $3 time`,\n          key: `system.cpu.util[,[user,system],avg1]`,\n          expected: \"CPU user,system - avg1 time\"\n        },\n        {\n          name: `CPU $2 - $3 time`,\n          key: `system.cpu.util[,[\"user,system\",iowait],avg1]`,\n          expected: `CPU \"user,system\",iowait - avg1 time`\n        },\n        {\n          name: `CPU - $2 - $3 - $4`,\n          key: `system.cpu.util[,[],[\"user,system\",iowait],avg1]`,\n          expected: `CPU -  - \"user,system\",iowait - avg1`\n        }\n      ];\n\n      _.each(test_cases, test_case => {\n        let expandedName = utils.expandItemName(test_case.name, test_case.key);\n        expect(expandedName).toBe(test_case.expected);\n      });\n      done();\n    });\n  });\n\n  describe('splitTemplateQuery()', () => {\n\n    // Backward compatibility\n    it('should properly split query in old format', (done) => {\n      let test_cases = [\n        {\n          query: `/alu/./tw-(nyc|que|brx|dwt|brk)-sta_(\\w|\\d)*-alu-[0-9{2}/`,\n          expected: ['/alu/', '/tw-(nyc|que|brx|dwt|brk)-sta_(\\w|\\d)*-alu-[0-9{2}/']\n        },\n        {\n          query: `a.b.c.d`,\n          expected: ['a', 'b', 'c', 'd']\n        }\n      ];\n\n      _.each(test_cases, test_case => {\n        let splitQuery = utils.splitTemplateQuery(test_case.query);\n        expect(splitQuery).toEqual(test_case.expected);\n      });\n      done();\n    });\n\n    it('should properly split query', (done) => {\n      let test_cases = [\n        {\n          query: `{alu}{/tw-(nyc|que|brx|dwt|brk)-sta_(\\w|\\d)*-alu-[0-9]*/}`,\n          expected: ['alu', '/tw-(nyc|que|brx|dwt|brk)-sta_(\\w|\\d)*-alu-[0-9]*/']\n        },\n        {\n          query: `{alu}{/tw-(nyc|que|brx|dwt|brk)-sta_(\\w|\\d)*-alu-[0-9]{2}/}`,\n          expected: ['alu', '/tw-(nyc|que|brx|dwt|brk)-sta_(\\w|\\d)*-alu-[0-9]{2}/']\n        },\n        {\n          query: `{a}{b}{c}{d}`,\n          expected: ['a', 'b', 'c', 'd']\n        },\n        {\n          query: `{a}{b.c.d}`,\n          expected: ['a', 'b.c.d']\n        }\n      ];\n\n      _.each(test_cases, test_case => {\n        let splitQuery = utils.splitTemplateQuery(test_case.query);\n        expect(splitQuery).toEqual(test_case.expected);\n      });\n      done();\n    });\n  });\n});\n"]}