{"version":3,"sources":["../../src/datasource-zabbix/dataProcessor.js"],"names":["limit","order","n","orderByFunc","timeseries","orderByCallback","aggregationFunctions","sortByIteratee","ts","values","_","map","datapoints","point","sortedTimeseries","sortBy","slice","removeAboveValue","removeBelowValue","transformNull","sortSeries","direction","orderBy","target","toLowerCase","setAlias","alias","replaceAlias","regexp","newAlias","pattern","utils","isRegex","buildRegex","replace","setAliasByRegex","extractText","str","extractPattern","RegExp","extractedValue","exec","groupByWrapper","interval","groupFunc","groupByCallback","groupBy","aggregateByWrapper","aggregateFunc","flattenedPoints","flatten","sortedPoints","sortByTime","aggregateWrapper","percentil","partial","PERCENTIL","timeShift","range","shift","parseTimeShiftInterval","time","unShiftTimeSeries","unshift","dp","downsampleSeries","downsample","groupBy_perf","groupBy_exported","sumSeries","delta","rate","scale","factor","scale_perf","simpleMovingAverage","expMovingAverage","a","SUM","COUNT","AVERAGE","MIN","MAX","MEDIAN","metricFunctions","movingAverage","exponentialMovingAverage","aggregateBy","average","min","max","median","sum","count","top","bottom","avg"],"mappings":"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","file":"dataProcessor.js","sourcesContent":["import _ from 'lodash';\r\nimport * as utils from './utils';\r\nimport ts from './timeseries';\r\n\r\nlet downsampleSeries = ts.downsample;\r\nlet groupBy = ts.groupBy_perf;\r\nlet groupBy_exported = (interval, groupFunc, datapoints) => groupBy(datapoints, interval, groupFunc);\r\nlet sumSeries = ts.sumSeries;\r\nlet delta = ts.delta;\r\nlet rate = ts.rate;\r\nlet scale = (factor, datapoints) => ts.scale_perf(datapoints, factor);\r\nlet simpleMovingAverage = (n, datapoints) => ts.simpleMovingAverage(datapoints, n);\r\nlet expMovingAverage = (a, datapoints) => ts.expMovingAverage(datapoints, a);\r\n\r\nlet SUM = ts.SUM;\r\nlet COUNT = ts.COUNT;\r\nlet AVERAGE = ts.AVERAGE;\r\nlet MIN = ts.MIN;\r\nlet MAX = ts.MAX;\r\nlet MEDIAN = ts.MEDIAN;\r\nlet PERCENTIL = ts.PERCENTIL;\r\n\r\nfunction limit(order, n, orderByFunc, timeseries) {\r\n  let orderByCallback = aggregationFunctions[orderByFunc];\r\n  let sortByIteratee = (ts) => {\r\n    let values = _.map(ts.datapoints, (point) => {\r\n      return point[0];\r\n    });\r\n    return orderByCallback(values);\r\n  };\r\n  let sortedTimeseries = _.sortBy(timeseries, sortByIteratee);\r\n  if (order === 'bottom') {\r\n    return sortedTimeseries.slice(0, n);\r\n  } else {\r\n    return sortedTimeseries.slice(-n);\r\n  }\r\n}\r\n\r\nfunction removeAboveValue(n, datapoints) {\r\n  return _.map(datapoints, point => {\r\n    return [\r\n      (point[0] > n) ? null : point[0],\r\n      point[1]\r\n    ];\r\n  });\r\n}\r\n\r\nfunction removeBelowValue(n, datapoints) {\r\n  return _.map(datapoints, point => {\r\n    return [\r\n      (point[0] < n) ? null : point[0],\r\n      point[1]\r\n    ];\r\n  });\r\n}\r\n\r\nfunction transformNull(n, datapoints) {\r\n  return _.map(datapoints, point => {\r\n    return [\r\n      (point[0] !== null) ? point[0] : n,\r\n      point[1]\r\n    ];\r\n  });\r\n}\r\n\r\nfunction sortSeries(direction, timeseries) {\r\n  return _.orderBy(timeseries, [function (ts) {\r\n    return ts.target.toLowerCase();\r\n  }], direction);\r\n}\r\n\r\nfunction setAlias(alias, timeseries) {\r\n  timeseries.target = alias;\r\n  return timeseries;\r\n}\r\n\r\nfunction replaceAlias(regexp, newAlias, timeseries) {\r\n  let pattern;\r\n  if (utils.isRegex(regexp)) {\r\n    pattern = utils.buildRegex(regexp);\r\n  } else {\r\n    pattern = regexp;\r\n  }\r\n\r\n  let alias = timeseries.target.replace(pattern, newAlias);\r\n  timeseries.target = alias;\r\n  return timeseries;\r\n}\r\n\r\nfunction setAliasByRegex(alias, timeseries) {\r\n  timeseries.target = extractText(timeseries.target, alias);\r\n  return timeseries;\r\n}\r\n\r\nfunction extractText(str, pattern) {\r\n  var extractPattern = new RegExp(pattern);\r\n  var extractedValue = extractPattern.exec(str);\r\n  extractedValue = extractedValue[0];\r\n  return extractedValue;\r\n}\r\n\r\nfunction groupByWrapper(interval, groupFunc, datapoints) {\r\n  var groupByCallback = aggregationFunctions[groupFunc];\r\n  return groupBy(datapoints, interval, groupByCallback);\r\n}\r\n\r\nfunction aggregateByWrapper(interval, aggregateFunc, datapoints) {\r\n  // Flatten all points in frame and then just use groupBy()\r\n  const flattenedPoints = _.flatten(datapoints, true);\r\n  // groupBy_perf works with sorted series only\r\n  const sortedPoints = ts.sortByTime(flattenedPoints);\r\n  let groupByCallback = aggregationFunctions[aggregateFunc];\r\n  return groupBy(sortedPoints, interval, groupByCallback);\r\n}\r\n\r\nfunction aggregateWrapper(groupByCallback, interval, datapoints) {\r\n  var flattenedPoints = _.flatten(datapoints, true);\r\n  return groupBy(flattenedPoints, interval, groupByCallback);\r\n}\r\n\r\nfunction percentil(interval, n, datapoints) {\r\n  var flattenedPoints = _.flatten(datapoints, true);\r\n  var groupByCallback = _.partial(PERCENTIL, n);\r\n  return groupBy(flattenedPoints, interval, groupByCallback);\r\n}\r\n\r\nfunction timeShift(interval, range) {\r\n  let shift = utils.parseTimeShiftInterval(interval) / 1000;\r\n  return _.map(range, time => {\r\n    return time - shift;\r\n  });\r\n}\r\n\r\nfunction unShiftTimeSeries(interval, datapoints) {\r\n  let unshift = utils.parseTimeShiftInterval(interval);\r\n  return _.map(datapoints, dp => {\r\n    return [\r\n      dp[0],\r\n      dp[1] + unshift\r\n    ];\r\n  });\r\n}\r\n\r\nlet metricFunctions = {\r\n  groupBy: groupByWrapper,\r\n  scale: scale,\r\n  delta: delta,\r\n  rate: rate,\r\n  movingAverage: simpleMovingAverage,\r\n  exponentialMovingAverage: expMovingAverage,\r\n  transformNull: transformNull,\r\n  aggregateBy: aggregateByWrapper,\r\n  // Predefined aggs\r\n  percentil: percentil,\r\n  average: _.partial(aggregateWrapper, AVERAGE),\r\n  min: _.partial(aggregateWrapper, MIN),\r\n  max: _.partial(aggregateWrapper, MAX),\r\n  median: _.partial(aggregateWrapper, MEDIAN),\r\n  sum: _.partial(aggregateWrapper, SUM),\r\n  count: _.partial(aggregateWrapper, COUNT),\r\n  sumSeries: sumSeries,\r\n  removeAboveValue: removeAboveValue,\r\n  removeBelowValue: removeBelowValue,\r\n  top: _.partial(limit, 'top'),\r\n  bottom: _.partial(limit, 'bottom'),\r\n  sortSeries: sortSeries,\r\n  timeShift: timeShift,\r\n  setAlias: setAlias,\r\n  setAliasByRegex: setAliasByRegex,\r\n  replaceAlias: replaceAlias\r\n};\r\n\r\nlet aggregationFunctions = {\r\n  avg: AVERAGE,\r\n  min: MIN,\r\n  max: MAX,\r\n  median: MEDIAN,\r\n  sum: SUM,\r\n  count: COUNT\r\n};\r\n\r\nexport default {\r\n  downsampleSeries: downsampleSeries,\r\n  groupBy: groupBy_exported,\r\n  AVERAGE: AVERAGE,\r\n  MIN: MIN,\r\n  MAX: MAX,\r\n  MEDIAN: MEDIAN,\r\n  SUM: SUM,\r\n  COUNT: COUNT,\r\n  unShiftTimeSeries: unShiftTimeSeries,\r\n\r\n  get aggregationFunctions() {\r\n    return aggregationFunctions;\r\n  },\r\n\r\n  get metricFunctions() {\r\n    return metricFunctions;\r\n  }\r\n};\r\n"]}