{"version":3,"sources":["../../src/datasource-zabbix/responseHandler.js"],"names":["convertHistory","history","items","addHostName","convertPointCallback","grouped_history","_","groupBy","hosts","uniqBy","flatten","map","hist","itemid","item","find","alias","name","keys","length","host","hostid","target","datapoints","handleHistory","convertHistoryPoint","handleTrends","valueType","partial","convertTrendPoint","handleText","convertTextCallback","convertText","handleHistoryAsTable","table","TableModel","addColumn","text","each","itemHistory","lastPoint","last","lastValue","value","skipEmptyValues","textFilter","extractText","useCaptureGroups","first","rows","push","key_","point","clock","Math","round","ns","str","pattern","extractPattern","RegExp","extractedValue","exec","handleSLAResponse","itservice","slaProperty","slaObject","targetSLA","serviceid","sla","property","targetStatus","parseInt","status","to","from","handleTriggersResponse","triggers","timeRange","isNumber","stats","getTriggerStats","orderBy","c","TRIGGER_SEVERITY","severity","severity_stats","group","row","toPairs","s","concat","groups","uniq","flattenDeep","trigger","priority","Number","value_min","value_max","value_avg","value_sum","value_count"],"mappings":"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","file":"responseHandler.js","sourcesContent":["import _ from 'lodash';\nimport TableModel from 'app/core/table_model';\nimport * as c from './constants';\n\n/**\n * Convert Zabbix API history.get response to Grafana format\n *\n * @return {Array}            Array of timeseries in Grafana format\n *                            {\n *                               target: \"Metric name\",\n *                               datapoints: [[<value>, <unixtime>], ...]\n *                            }\n */\nfunction convertHistory(history, items, addHostName, convertPointCallback) {\n  /**\n   * Response should be in the format:\n   * data: [\n   *          {\n   *             target: \"Metric name\",\n   *             datapoints: [[<value>, <unixtime>], ...]\n   *          }, ...\n   *       ]\n   */\n\n  // Group history by itemid\n  var grouped_history = _.groupBy(history, 'itemid');\n  var hosts = _.uniqBy(_.flatten(_.map(items, 'hosts')), 'hostid');  //uniqBy is needed to deduplicate\n\n  return _.map(grouped_history, function(hist, itemid) {\n    var item = _.find(items, {'itemid': itemid});\n    var alias = item.name;\n    if (_.keys(hosts).length > 1 && addHostName) {   //only when actual multi hosts selected\n      var host = _.find(hosts, {'hostid': item.hostid});\n      alias = host.name + \": \" + alias;\n    }\n    return {\n      target: alias,\n      datapoints: _.map(hist, convertPointCallback)\n    };\n  });\n}\n\nfunction handleHistory(history, items, addHostName = true) {\n  return convertHistory(history, items, addHostName, convertHistoryPoint);\n}\n\nfunction handleTrends(history, items, valueType, addHostName = true) {\n  var convertPointCallback = _.partial(convertTrendPoint, valueType);\n  return convertHistory(history, items, addHostName, convertPointCallback);\n}\n\nfunction handleText(history, items, target, addHostName = true) {\n  let convertTextCallback = _.partial(convertText, target);\n  return convertHistory(history, items, addHostName, convertTextCallback);\n}\n\nfunction handleHistoryAsTable(history, items, target) {\n  let table = new TableModel();\n  table.addColumn({text: 'Host'});\n  table.addColumn({text: 'Item'});\n  table.addColumn({text: 'Key'});\n  table.addColumn({text: 'Last value'});\n\n  let grouped_history = _.groupBy(history, 'itemid');\n  _.each(items, (item) => {\n    let itemHistory = grouped_history[item.itemid] || [];\n    let lastPoint = _.last(itemHistory);\n    let lastValue = lastPoint ? lastPoint.value : null;\n\n    if(target.table.skipEmptyValues && (!lastValue || lastValue === '')) {\n      return;\n    }\n\n    // Regex-based extractor\n    if (target.textFilter) {\n      lastValue = extractText(lastValue, target.textFilter, target.useCaptureGroups);\n    }\n\n    let host = _.first(item.hosts);\n    host = host ? host.name : \"\";\n\n    table.rows.push([\n      host, item.name, item.key_, lastValue\n    ]);\n  });\n\n  return table;\n}\n\nfunction convertText(target, point) {\n  let value = point.value;\n\n  // Regex-based extractor\n  if (target.textFilter) {\n    value = extractText(point.value, target.textFilter, target.useCaptureGroups);\n  }\n\n  return [\n    value,\n    point.clock * 1000 + Math.round(point.ns / 1000000)\n  ];\n}\n\nfunction extractText(str, pattern, useCaptureGroups) {\n  let extractPattern = new RegExp(pattern);\n  let extractedValue = extractPattern.exec(str);\n  if (extractedValue) {\n    if (useCaptureGroups) {\n      extractedValue = extractedValue[1];\n    } else {\n      extractedValue = extractedValue[0];\n    }\n  }\n  return extractedValue;\n}\n\nfunction handleSLAResponse(itservice, slaProperty, slaObject) {\n  var targetSLA = slaObject[itservice.serviceid].sla[0];\n  if (slaProperty.property === 'status') {\n    var targetStatus = parseInt(slaObject[itservice.serviceid].status);\n    return {\n      target: itservice.name + ' ' + slaProperty.name,\n      datapoints: [\n        [targetStatus, targetSLA.to * 1000]\n      ]\n    };\n  } else {\n    return {\n      target: itservice.name + ' ' + slaProperty.name,\n      datapoints: [\n        [targetSLA[slaProperty.property], targetSLA.from * 1000],\n        [targetSLA[slaProperty.property], targetSLA.to * 1000]\n      ]\n    };\n  }\n}\n\nfunction handleTriggersResponse(triggers, timeRange) {\n  if (_.isNumber(triggers)) {\n    return {\n      target: \"triggers count\",\n      datapoints: [\n        [triggers, timeRange[1] * 1000]\n      ]\n    };\n  } else {\n    let stats = getTriggerStats(triggers);\n    let table = new TableModel();\n    table.addColumn({text: 'Host group'});\n    _.each(_.orderBy(c.TRIGGER_SEVERITY, ['val'], ['desc']), (severity) => {\n      table.addColumn({text: severity.text});\n    });\n    _.each(stats, (severity_stats, group) => {\n      let row = _.map(_.orderBy(_.toPairs(severity_stats), (s) => s[0], ['desc']), (s) => s[1]);\n      row = _.concat([group], ...row);\n      table.rows.push(row);\n    });\n    return table;\n  }\n}\n\nfunction getTriggerStats(triggers) {\n  let groups = _.uniq(_.flattenDeep(_.map(triggers, (trigger) => _.map(trigger.groups, 'name'))));\n  // let severity = _.map(c.TRIGGER_SEVERITY, 'text');\n  let stats = {};\n  _.each(groups, (group) => {\n    stats[group] = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0}; // severity:count\n  });\n  _.each(triggers, (trigger) => {\n    _.each(trigger.groups, (group) => {\n      stats[group.name][trigger.priority]++;\n    });\n  });\n  return stats;\n}\n\nfunction convertHistoryPoint(point) {\n  // Value must be a number for properly work\n  return [\n    Number(point.value),\n    point.clock * 1000 + Math.round(point.ns / 1000000)\n  ];\n}\n\nfunction convertTrendPoint(valueType, point) {\n  var value;\n  switch (valueType) {\n    case \"min\":\n      value = point.value_min;\n      break;\n    case \"max\":\n      value = point.value_max;\n      break;\n    case \"avg\":\n      value = point.value_avg;\n      break;\n    case \"sum\":\n      value = point.value_sum;\n      break;\n    case \"count\":\n      value = point.value_count;\n      break;\n    default:\n      value = point.value_avg;\n  }\n\n  return [\n    Number(value),\n    point.clock * 1000\n  ];\n}\n\nexport default {\n  handleHistory: handleHistory,\n  convertHistory: convertHistory,\n  handleTrends: handleTrends,\n  handleText: handleText,\n  handleHistoryAsTable: handleHistoryAsTable,\n  handleSLAResponse: handleSLAResponse,\n  handleTriggersResponse: handleTriggersResponse\n};\n\n// Fix for backward compatibility with lodash 2.4\nif (!_.uniqBy) {_.uniqBy = _.uniq;}\n"]}