{"version":3,"sources":["../../../src/datasource-zabbix/zabbix/zabbix.js"],"names":["findByName","list","name","finded","_","find","filterByName","filter","filterByRegex","regex","filterPattern","utils","buildRegex","zbx_obj","test","findByFilter","isRegex","filterByQuery","getHostIds","items","hostIds","map","item","hosts","uniq","flatten","responseHandler","ZabbixAPIConnector","SQLConnector","CachingProxy","ZabbixNotImplemented","REQUESTS_TO_PROXYFY","REQUESTS_TO_CACHE","REQUESTS_TO_BIND","Zabbix","options","backendSrv","datasourceSrv","url","username","password","basicAuth","withCredentials","cacheTTL","enableDirectDBConnection","datasourceId","cacheOptions","enabled","ttl","cachingProxy","zabbixAPI","dbConnectorOptions","dbConnector","getHistoryDB","proxyfyWithCache","getHistory","getTrendsDB","getTrends","proxyfyRequests","cacheRequests","bindRequests","request","proxyfy","cacheRequest","bind","zabbixVersion","dbConnectorStatus","getVersion","then","version","login","testDataSource","Promise","resolve","catch","error","reject","testResult","dsType","datasourceTypeName","dsName","datasourceName","target","parts","filters","p","getItems","all","getHosts","getApps","results","apps","appFilterEmpty","getGroups","groupFilter","getAllGroups","groups","groupids","hostFilter","getAllHosts","hostids","appFilter","undefined","itemtype","appids","showDisabledItems","expandUserMacro","getMacros","forEach","containsMacro","replaceMacro","macros","itemFilter","getAllItems","itServiceFilter","getITService","itServices","promises","filteredGroups","filteredHosts","filteredApps","query","applicationids","getTriggers","timeRange","timeFrom","timeTo","handleGrafanaTSResponse","history","handleHistory","valueType","consolidateBy","getTrend","handleTrends","sortTimeseries","length","resultFormat","handleHistoryAsTable","handleText","itservices","isOldVersion","itservice","serviceid","itServiceIds","getSLA","handleSLAResponse","slaProperty","slaResponse"],"mappings":"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","file":"zabbix.js","sourcesContent":["import _ from 'lodash';\nimport * as utils from '../utils';\nimport responseHandler from '../responseHandler';\nimport { ZabbixAPIConnector } from './connectors/zabbix_api/zabbixAPIConnector';\nimport { SQLConnector } from './connectors/sql/sqlConnector';\nimport { CachingProxy } from './proxy/cachingProxy';\nimport { ZabbixNotImplemented } from './connectors/dbConnector';\n\nconst REQUESTS_TO_PROXYFY = [\n  'getHistory', 'getTrend', 'getGroups', 'getHosts', 'getApps', 'getItems', 'getMacros', 'getItemsByIDs',\n  'getEvents', 'getAlerts', 'getHostAlerts', 'getAcknowledges', 'getITService', 'getSLA', 'getVersion'\n];\n\nconst REQUESTS_TO_CACHE = [\n  'getGroups', 'getHosts', 'getApps', 'getItems', 'getMacros', 'getItemsByIDs', 'getITService'\n];\n\nconst REQUESTS_TO_BIND = [\n  'getHistory', 'getTrend', 'getMacros', 'getItemsByIDs', 'getEvents', 'getAlerts', 'getHostAlerts',\n  'getAcknowledges', 'getITService', 'getVersion', 'login'\n];\n\nexport class Zabbix {\n  constructor(options, backendSrv, datasourceSrv) {\n    let {\n      url,\n      username,\n      password,\n      basicAuth,\n      withCredentials,\n      cacheTTL,\n      enableDirectDBConnection,\n      datasourceId\n    } = options;\n\n    this.enableDirectDBConnection = enableDirectDBConnection;\n\n    // Initialize caching proxy for requests\n    let cacheOptions = {\n      enabled: true,\n      ttl: cacheTTL\n    };\n    this.cachingProxy = new CachingProxy(cacheOptions);\n\n    this.zabbixAPI = new ZabbixAPIConnector(url, username, password, basicAuth, withCredentials, backendSrv);\n\n    if (enableDirectDBConnection) {\n      let dbConnectorOptions = { datasourceId };\n      this.dbConnector = new SQLConnector(dbConnectorOptions, backendSrv, datasourceSrv);\n      this.getHistoryDB = this.cachingProxy.proxyfyWithCache(this.dbConnector.getHistory, 'getHistory', this.dbConnector);\n      this.getTrendsDB = this.cachingProxy.proxyfyWithCache(this.dbConnector.getTrends, 'getTrends', this.dbConnector);\n    }\n\n    this.proxyfyRequests();\n    this.cacheRequests();\n    this.bindRequests();\n  }\n\n  proxyfyRequests() {\n    for (let request of REQUESTS_TO_PROXYFY) {\n      this.zabbixAPI[request] = this.cachingProxy.proxyfy(this.zabbixAPI[request], request, this.zabbixAPI);\n    }\n  }\n\n  cacheRequests() {\n    for (let request of REQUESTS_TO_CACHE) {\n      this.zabbixAPI[request] = this.cachingProxy.cacheRequest(this.zabbixAPI[request], request, this.zabbixAPI);\n    }\n  }\n\n  bindRequests() {\n    for (let request of REQUESTS_TO_BIND) {\n      this[request] = this.zabbixAPI[request].bind(this.zabbixAPI);\n    }\n  }\n\n  /**\n   * Perform test query for Zabbix API and external history DB.\n   * @return {object} test result object:\n   * ```\n    {\n      zabbixVersion,\n      dbConnectorStatus: {\n        dsType,\n        dsName\n      }\n    }\n   ```\n   */\n  testDataSource() {\n    let zabbixVersion;\n    let dbConnectorStatus;\n    return this.getVersion()\n    .then(version => {\n      zabbixVersion = version;\n      return this.login();\n    })\n    .then(() => {\n      if (this.enableDirectDBConnection) {\n        return this.dbConnector.testDataSource();\n      } else {\n        return Promise.resolve();\n      }\n    })\n    .catch(error => {\n      if (error instanceof ZabbixNotImplemented) {\n        return Promise.resolve();\n      }\n      return Promise.reject(error);\n    })\n    .then(testResult => {\n      if (testResult) {\n        dbConnectorStatus = {\n          dsType: this.dbConnector.datasourceTypeName,\n          dsName: this.dbConnector.datasourceName\n        };\n      }\n      return { zabbixVersion, dbConnectorStatus };\n    });\n  }\n\n  getItemsFromTarget(target, options) {\n    let parts = ['group', 'host', 'application', 'item'];\n    let filters = _.map(parts, p => target[p].filter);\n    return this.getItems(...filters, options);\n  }\n\n  getHostsFromTarget(target) {\n    let parts = ['group', 'host', 'application'];\n    let filters = _.map(parts, p => target[p].filter);\n    return Promise.all([\n      this.getHosts(...filters),\n      this.getApps(...filters),\n    ]).then((results) => {\n      let [hosts, apps] = results;\n      if (apps.appFilterEmpty) {\n        apps = [];\n      }\n      return [hosts, apps];\n    });\n  }\n\n  getAllGroups() {\n    return this.zabbixAPI.getGroups();\n  }\n\n  getGroups(groupFilter) {\n    return this.getAllGroups()\n    .then(groups => findByFilter(groups, groupFilter));\n  }\n\n  /**\n   * Get list of host belonging to given groups.\n   */\n  getAllHosts(groupFilter) {\n    return this.getGroups(groupFilter)\n    .then(groups => {\n      let groupids = _.map(groups, 'groupid');\n      return this.zabbixAPI.getHosts(groupids);\n    });\n  }\n\n  getHosts(groupFilter, hostFilter) {\n    return this.getAllHosts(groupFilter)\n    .then(hosts => findByFilter(hosts, hostFilter));\n  }\n\n  /**\n   * Get list of applications belonging to given groups and hosts.\n   */\n  getAllApps(groupFilter, hostFilter) {\n    return this.getHosts(groupFilter, hostFilter)\n    .then(hosts => {\n      let hostids = _.map(hosts, 'hostid');\n      return this.zabbixAPI.getApps(hostids);\n    });\n  }\n\n  getApps(groupFilter, hostFilter, appFilter) {\n    return this.getHosts(groupFilter, hostFilter)\n    .then(hosts => {\n      let hostids = _.map(hosts, 'hostid');\n      if (appFilter) {\n        return this.zabbixAPI.getApps(hostids)\n        .then(apps => filterByQuery(apps, appFilter));\n      } else {\n        return {\n          appFilterEmpty: true,\n          hostids: hostids\n        };\n      }\n    });\n  }\n\n  getAllItems(groupFilter, hostFilter, appFilter, options = {}) {\n    return this.getApps(groupFilter, hostFilter, appFilter)\n    .then(apps => {\n      if (apps.appFilterEmpty) {\n        return this.zabbixAPI.getItems(apps.hostids, undefined, options.itemtype);\n      } else {\n        let appids = _.map(apps, 'applicationid');\n        return this.zabbixAPI.getItems(undefined, appids, options.itemtype);\n      }\n    })\n    .then(items => {\n      if (!options.showDisabledItems) {\n        items = _.filter(items, {'status': '0'});\n      }\n\n      return items;\n    })\n    .then(this.expandUserMacro.bind(this));\n  }\n\n  expandUserMacro(items) {\n    let hostids = getHostIds(items);\n    return this.getMacros(hostids)\n    .then(macros => {\n      _.forEach(items, item => {\n        if (utils.containsMacro(item.name)) {\n          item.name = utils.replaceMacro(item, macros);\n        }\n      });\n      return items;\n    });\n  }\n\n  getItems(groupFilter, hostFilter, appFilter, itemFilter, options = {}) {\n    return this.getAllItems(groupFilter, hostFilter, appFilter, options)\n    .then(items => filterByQuery(items, itemFilter));\n  }\n\n  getITServices(itServiceFilter) {\n    return this.zabbixAPI.getITService()\n    .then(itServices => findByFilter(itServices, itServiceFilter));\n  }\n\n  /**\n   * Build query - convert target filters to array of Zabbix items\n   */\n  getTriggers(groupFilter, hostFilter, appFilter, options) {\n    let promises = [\n      this.getGroups(groupFilter),\n      this.getHosts(groupFilter, hostFilter),\n      this.getApps(groupFilter, hostFilter, appFilter)\n    ];\n\n    return Promise.all(promises)\n    .then(results => {\n      let filteredGroups = results[0];\n      let filteredHosts = results[1];\n      let filteredApps = results[2];\n      let query = {};\n\n      if (appFilter) {\n        query.applicationids = _.flatten(_.map(filteredApps, 'applicationid'));\n      }\n      if (hostFilter) {\n        query.hostids = _.map(filteredHosts, 'hostid');\n      }\n      if (groupFilter) {\n        query.groupids = _.map(filteredGroups, 'groupid');\n      }\n\n      return query;\n    }).then(query => {\n      return this.zabbixAPI.getTriggers(query.groupids, query.hostids, query.applicationids, options);\n    });\n  }\n\n  getHistoryTS(items, timeRange, options) {\n    let [timeFrom, timeTo] = timeRange;\n    if (this.enableDirectDBConnection) {\n      return this.getHistoryDB(items, timeFrom, timeTo, options)\n      .then(history => this.dbConnector.handleGrafanaTSResponse(history, items));\n    } else {\n      return this.zabbixAPI.getHistory(items, timeFrom, timeTo)\n      .then(history => responseHandler.handleHistory(history, items));\n    }\n  }\n\n  getTrends(items, timeRange, options) {\n    let [timeFrom, timeTo] = timeRange;\n    if (this.enableDirectDBConnection) {\n      return this.getTrendsDB(items, timeFrom, timeTo, options)\n      .then(history => this.dbConnector.handleGrafanaTSResponse(history, items));\n    } else {\n      let valueType = options.consolidateBy || options.valueType;\n      return this.zabbixAPI.getTrend(items, timeFrom, timeTo)\n      .then(history => responseHandler.handleTrends(history, items, valueType))\n      .then(responseHandler.sortTimeseries); // Sort trend data, issue #202\n    }\n  }\n\n  getHistoryText(items, timeRange, target) {\n    let [timeFrom, timeTo] = timeRange;\n    if (items.length) {\n      return this.zabbixAPI.getHistory(items, timeFrom, timeTo)\n      .then(history => {\n        if (target.resultFormat === 'table') {\n          return responseHandler.handleHistoryAsTable(history, items, target);\n        } else {\n          return responseHandler.handleText(history, items, target);\n        }\n      });\n    } else {\n      return Promise.resolve([]);\n    }\n  }\n\n  getSLA(itservices, timeRange, target, options) {\n    let itServices = itservices;\n    if (options.isOldVersion) {\n      itServices = _.filter(itServices, {'serviceid': target.itservice.serviceid});\n    }\n    let itServiceIds = _.map(itServices, 'serviceid');\n    return this.zabbixAPI.getSLA(itServiceIds, timeRange)\n    .then(slaResponse => {\n      return _.map(itServiceIds, serviceid => {\n        let itservice = _.find(itServices, {'serviceid': serviceid});\n        return responseHandler.handleSLAResponse(itservice, target.slaProperty, slaResponse);\n      });\n    });\n  }\n}\n\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Find group, host, app or item by given name.\n * @param  list list of groups, apps or other\n * @param  name visible name\n * @return      array with finded element or empty array\n */\nfunction findByName(list, name) {\n  var finded = _.find(list, {'name': name});\n  if (finded) {\n    return [finded];\n  } else {\n    return [];\n  }\n}\n\n/**\n * Different hosts can contains applications and items with same name.\n * For this reason use _.filter, which return all elements instead _.find,\n * which return only first finded.\n * @param  {[type]} list list of elements\n * @param  {[type]} name app name\n * @return {[type]}      array with finded element or empty array\n */\nfunction filterByName(list, name) {\n  var finded = _.filter(list, {'name': name});\n  if (finded) {\n    return finded;\n  } else {\n    return [];\n  }\n}\n\nfunction filterByRegex(list, regex) {\n  var filterPattern = utils.buildRegex(regex);\n  return _.filter(list, function (zbx_obj) {\n    return filterPattern.test(zbx_obj.name);\n  });\n}\n\nfunction findByFilter(list, filter) {\n  if (utils.isRegex(filter)) {\n    return filterByRegex(list, filter);\n  } else {\n    return findByName(list, filter);\n  }\n}\n\nfunction filterByQuery(list, filter) {\n  if (utils.isRegex(filter)) {\n    return filterByRegex(list, filter);\n  } else {\n    return filterByName(list, filter);\n  }\n}\n\nfunction getHostIds(items) {\n  let hostIds = _.map(items, item => {\n    return _.map(item.hosts, 'hostid');\n  });\n  return _.uniq(_.flatten(hostIds));\n}\n"]}